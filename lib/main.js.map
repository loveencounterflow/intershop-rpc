{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP-RPC'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\n# PATH                      = require 'path'\nNET                       = require 'net'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $drain }                = SP.export()\n#...........................................................................................................\nDATOM                     = require 'datom'\n{ new_datom\n  freeze\n  select }                = DATOM.export()\n#...........................................................................................................\n@types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = @types\n#...........................................................................................................\njr                        = JSON.stringify\nMultimix                  = require 'multimix'\n#...........................................................................................................\n_defaults                 = freeze\n  host:                     'localhost'\n  port:                     23001\n  show_counts:              true\n  count_interval:           1000\n  socket_log_all:           false\n  socketserver_log_all:     false\n  logging:                  true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'intershop_rpc_settings',\n  tests:\n    \"x is a object\":                          ( x ) -> @isa.object x\n    \"x.host is a nonempty_text\":              ( x ) -> @isa.nonempty_text x.host\n    \"x.port is a count\":                      ( x ) -> @isa.count x.port\n    \"x.show_counts is a boolean\":             ( x ) -> @isa.boolean x.show_counts\n    \"x.count_interval is a positive_integer\": ( x ) -> @isa.positive_integer x.count_interval\n    \"x.socket_log_all is a boolean\":          ( x ) -> @isa.boolean x.socket_log_all\n    \"x.socketserver_log_all is a boolean\":    ( x ) -> @isa.boolean x.socketserver_log_all\n    \"x.logging is a boolean or a function\":   ( x ) -> ( @isa.boolean x.logging ) or ( @isa.function x.logging )\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Rpc extends Multimix\n  @defaults = _defaults\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings ) ->\n    super()\n    @settings         = { _defaults..., settings..., }\n    validate.intershop_rpc_settings @settings\n    @settings.address = \"#{@settings.host}:#{@settings.port}\"\n    @settings         = freeze @settings\n    @_xemitter        = DATOM.new_xemitter()\n    @counts           = { requests: 0, rpcs: 0, hits: 0, fails: 0, errors: 0, }\n    @_socketserver    = @_create_socketserver()\n    #.......................................................................................................\n    @_socket_listen_on_all() if @settings.socket_log_all\n    @_server_listen_on_all() if @settings.socketserver_log_all\n    #.......................................................................................................\n    if @settings.logging isnt false\n      method = if @settings.logging is true then @_log else @settings.logging\n      @listen_to '^log', method\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  @create: ( settings ) ->\n    ### Convenience method to instantiate and start server ###\n    R = new @ settings\n    await R.start()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_socketserver: -> return NET.createServer ( socket ) =>\n    @_socket          = socket\n    socket.on 'data',   ( data  ) => source.send data unless data is ''\n    socket.on 'error',  ( error ) => warn \"socket error: #{error.message}\"\n    source            = SP.new_push_source()\n    pipeline          = []\n    #.......................................................................................................\n    pipeline.push source\n    # pipeline.push $watch ( d ) => debug '^3398^', rpr d.toString()\n    pipeline.push SP.$split()\n    pipeline.push @_$show_counts()\n    pipeline.push @_$dispatch()\n    pipeline.push $drain()\n    #.......................................................................................................\n    SP.pull pipeline...\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  start: -> new Promise ( resolve, reject ) =>\n    process.on 'uncaughtException',  ( error ) => await @stop(); process.exitCode = 1; reject error\n    process.on 'unhandledRejection', ( error ) => await @stop(); process.exitCode = 1; reject error\n    @_socketserver.listen @settings.port, @settings.host, =>\n      { address: host, port, family, } = @_socketserver.address()\n      ### TAINT do in constructor? or add to settings? ###\n      app_name = process.env[ 'intershop_db_name' ] ? 'intershop'\n      help \"RPC server for #{app_name} listening on #{family} #{host}:#{port}\"\n      resolve null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  stop: -> new Promise ( resolve, reject ) =>\n    @_socket.destroy() if @_socket?\n    # return resolve() if @_socketserver.\n    @_socketserver.close ( error ) =>\n      return reject error if error?\n      resolve null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _log: ( d ) =>\n    if isa.list ( value = d.$value ? d )\n      value = ( ( if isa.text x then x else rpr x ) for x in value ).join ' '\n    echo ( CND.grey @settings.address + ' RPC:' ), ( CND.yellow value )\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _$show_counts: -> $watch ( event ) =>\n    @counts.requests += +1\n    if @settings.show_counts and ( @counts.requests % @settings.count_interval ) is 0\n      urge jr @counts\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _$dispatch: -> $ ( line, send ) =>\n    return null if line is ''\n    event       = null\n    method      = null\n    parameters  = null\n    $rsvp       = false\n    #.......................................................................................................\n    loop\n      ### TAINt first parse format to be prepended, as in e.g. `json:{}` ###\n      try event = JSON.parse line catch error\n        @send_error \"\"\"^rpc-secondary/$dispatch@1357^\n          An error occurred while trying to parse #{rpr line}:\n          #{error.message}\"\"\"\n        break\n      #.....................................................................................................\n      switch type = type_of event\n        when 'object'\n          method_name = event.$key\n          parameters  = event.$value\n          $rsvp       = event.$rsvp ? false\n        else\n          @send_error \"^rpc-secondary/$dispatch@1359^ expected object, got a #{type}: #{rpr event}\"\n          break\n      #.....................................................................................................\n      switch method_name\n        when 'error'\n          @send_error parameters\n        #...................................................................................................\n        when 'stop'\n          ### TAINT really exit process? ###\n          process.exit()\n        #...................................................................................................\n        else\n          if $rsvp is true then @do_rpc method_name, parameters\n          else                  @emit   method_name, parameters\n      #.....................................................................................................\n      break\n    #.......................................................................................................\n    ### TAINT sending on failed lines w/out marking them as such? ###\n    send event ? line\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  do_rpc: ( method_name, parameters ) ->\n    @counts.rpcs  += +1\n    result = await @delegate method_name, parameters\n    # help '^intershop-rpc/server/do_rpc@5567^', { result, }\n    if isa.promise result\n      result.then ( result ) => @_write method_name, result\n    else\n      @_write method_name, result\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send_error: ( message ) ->\n    @_write 'error', message\n\n  #---------------------------------------------------------------------------------------------------------\n  _write: ( $method, parameters ) ->\n    # debug '^intershop-rpc-server-secondary.coffee@1362^', ( rpr method_name ), ( rpr parameters )\n    # if isa.object parameters  then  d = new_datom '^rpc-result', { $method, parameters..., }\n    # else                            d = new_datom '^rpc-result', { $method, $value: parameters, }\n    d = new_datom '^rpc-result', { $method, $value: parameters, }\n    @_socket.write ( jr d ) + '\\n'\n    return null\n\n\n  #=========================================================================================================\n  # XEMITTER METHODS\n  #---------------------------------------------------------------------------------------------------------\n  contract:           ( P... ) -> @_xemitter.contract           P...\n  listen_to:          ( P... ) -> @_xemitter.listen_to          P...\n  listen_to_all:      ( P... ) -> @_xemitter.listen_to_all      P...\n  listen_to_unheard:  ( P... ) -> @_xemitter.listen_to_unheard  P...\n  emit:               ( P... ) -> @_xemitter.emit               P...\n  delegate:           ( P... ) -> @_xemitter.delegate           P...\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _socket_listen_on_all: ->\n    ### TAINT add arguments, timestamp ###\n    @_socket.on 'close',   ( P... ) -> whisper '^intershop-rpc@4432-1^', 'socket:close'   # , ( rpr P )[ .. 100 ]\n    @_socket.on 'connect', ( P... ) -> whisper '^intershop-rpc@4432-2^', 'socket:connect' # , ( rpr P )[ .. 100 ]\n    @_socket.on 'data',    ( P... ) -> whisper '^intershop-rpc@4432-3^', 'socket:data'    # , ( rpr P )[ .. 100 ]\n    @_socket.on 'drain',   ( P... ) -> whisper '^intershop-rpc@4432-4^', 'socket:drain'   # , ( rpr P )[ .. 100 ]\n    @_socket.on 'end',     ( P... ) -> whisper '^intershop-rpc@4432-5^', 'socket:end'     # , ( rpr P )[ .. 100 ]\n    @_socket.on 'error',   ( P... ) -> whisper '^intershop-rpc@4432-6^', 'socket:error'   # , ( rpr P )[ .. 100 ]\n    @_socket.on 'lookup',  ( P... ) -> whisper '^intershop-rpc@4432-7^', 'socket:lookup'  # , ( rpr P )[ .. 100 ]\n    @_socket.on 'timeout', ( P... ) -> whisper '^intershop-rpc@4432-8^', 'socket:timeout' # , ( rpr P )[ .. 100 ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _server_listen_on_all: ->\n    ### TAINT add arguments, timestamp ###\n    @_socketserver.on 'close',      ( P... ) -> whisper '^intershop-rpc@4432-9^',  'socketserver:close'       # , ( rpr P )[ .. 100 ]\n    @_socketserver.on 'connection', ( P... ) -> whisper '^intershop-rpc@4432-10^', 'socketserver:connection'  # , ( rpr P )[ .. 100 ]\n    @_socketserver.on 'error',      ( P... ) -> whisper '^intershop-rpc@4432-11^', 'socketserver:error'       # , ( rpr P )[ .. 100 ]\n    @_socketserver.on 'listening',  ( P... ) -> whisper '^intershop-rpc@4432-12^', 'socketserver:listening'   # , ( rpr P )[ .. 100 ]\n    return null\n\n\n############################################################################################################\nmodule.exports = Rpc\n\n\n############################################################################################################\nif module is require.main then do =>\n  null\n\n"
  ]
}
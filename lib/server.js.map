{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP-RPC/SERVER'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\n# PATH                      = require 'path'\nNET                       = require 'net'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $drain }                = SP.export()\n#...........................................................................................................\nDATOM                     = require 'datom'\n{ new_datom\n  select }                = DATOM.export()\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = @types\n#...........................................................................................................\n{ jr }                    = CND\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_server = ( me, settings ) ->\n  defaults    = { socket_log_all: false, socketserver_log_all: false, }\n  settings    = { defaults..., settings..., }\n  R           = {}\n  R.xemitter  = DATOM.new_xemitter()\n  R.stop      = -> R.socketserver.close()\n  #.........................................................................................................\n  R.socketserver = NET.createServer ( socket ) =>\n    R.socket          = socket\n    @_socket_listen_on_all socket if settings.socket_log_all\n    R.counts          = { requests: 0, rpcs: 0, hits: 0, fails: 0, errors: 0, }\n    R.show_counts     = false\n    R.count_interval  = 1000\n    socket.on 'data',   ( data  ) => source.send data unless data is ''\n    socket.on 'error',  ( error ) => warn \"socket error: #{error.message}\"\n    source            = SP.new_push_source()\n    pipeline          = []\n    #.......................................................................................................\n    pipeline.push source\n    pipeline.push SP.$split()\n    # pipeline.push $watch ( d ) => urge '^3398^', jr d\n    pipeline.push @$show_counts   me\n    pipeline.push @$dispatch      me\n    pipeline.push $drain()\n    #.......................................................................................................\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  @_server_listen_on_all R.socketserver if settings.socketserver_log_all\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@start = ( me ) -> new Promise ( resolve, reject ) =>\n  #.........................................................................................................\n  process.on 'uncaughtException',  => await @stop me; process.exitCode = 1\n  process.on 'unhandledRejection', => await @stop me; process.exitCode = 1\n  ### TAINT setting these as constants FTTB ###\n  # host = 'localhost'\n  host = '127.0.0.1'\n  me.server.socketserver.listen me.port, host, =>\n    { address: host, port, family, } = me.server.socketserver.address()\n    app_name = process.env[ 'intershop_db_name' ] ? 'intershop'\n    help \"RPC server for #{app_name} listening on #{family} #{host}:#{port}\"\n    resolve null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@stop = ( me ) -> new Promise ( resolve, reject ) =>\n  me.server.socketserver.close ( error ) =>\n    return reject error if error?\n    resolve null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_counts = ( me ) -> $watch ( event ) ->\n  me.server.counts.requests += +1\n  if me.server.show_counts and ( me.server.counts.requests % me.server.count_interval ) is 0\n    urge JSON.stringify me.server.counts\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$dispatch = ( me ) ->\n  return $ ( line, send ) =>\n    return null if line is ''\n    event       = null\n    method      = null\n    parameters  = null\n    $rsvp       = false\n    #.......................................................................................................\n    loop\n      ### TAINt first parse format to be prepended, as in e.g. `json:{}` ###\n      try event = JSON.parse line catch error\n        @send_error me, \"\"\"^rpc-secondary/$dispatch@1357^\n          An error occurred while trying to parse #{rpr line}:\n          #{error.message}\"\"\"\n        break\n      #.....................................................................................................\n      switch type = type_of event\n        when 'object'\n          method_name = event.$key\n          parameters  = event.$value\n          $rsvp       = event.$rsvp ? false\n        else\n          @send_error me, \"^rpc-secondary/$dispatch@1359^ expected object, got a #{type}: #{rpr event}\"\n          break\n      #.....................................................................................................\n      switch method_name\n        when 'error'\n          @send_error me, parameters\n        #...................................................................................................\n        when 'stop'\n          ### TAINT really exit process? ###\n          process.exit()\n        #...................................................................................................\n        else\n          if $rsvp is true\n            ### TAINT `@do_rpc() is async ###\n            @do_rpc me, method_name, parameters\n      #.....................................................................................................\n      break\n    #.......................................................................................................\n    ### TAINT sending on failed lines w/out marking them as such? ###\n    send event ? line\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@do_rpc = ( me, method_name, parameters ) ->\n  me.server.counts.rpcs  += +1\n  help '^intershop-rpc/server/do_rpc@5567^', result = await me.delegate method_name, parameters\n  if isa.promise result\n    result.then ( result ) => @_write me, method_name, result\n  else\n    @_write me, method_name, result\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@send_error = ( me, message ) ->\n  @_write me, 'error', message\n\n#-----------------------------------------------------------------------------------------------------------\n@_write = ( me, $method, parameters ) ->\n  # debug '^intershop-rpc-server-secondary.coffee@1362^', ( rpr method_name ), ( rpr parameters )\n  # if isa.object parameters  then  d = new_datom '^rpc-result', { $method, parameters..., }\n  # else                            d = new_datom '^rpc-result', { $method, $value: parameters, }\n  d = new_datom '^rpc-result', { $method, $value: parameters, }\n  me.server.socket.write ( JSON.stringify d ) + '\\n'\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_socket_listen_on_all = ( socket ) ->\n  ### TAINT add arguments, timestamp ###\n  socket.on 'close',      ( P... ) -> whisper '^intershop-rpc@4432-1^', 'socket:close'                    # , ( rpr P )[ .. 100 ]\n  socket.on 'connect',    ( P... ) -> whisper '^intershop-rpc@4432-2^', 'socket:connect'                  # , ( rpr P )[ .. 100 ]\n  socket.on 'data',       ( P... ) -> whisper '^intershop-rpc@4432-3^', 'socket:data'                     # , ( rpr P )[ .. 100 ]\n  socket.on 'drain',      ( P... ) -> whisper '^intershop-rpc@4432-4^', 'socket:drain'                    # , ( rpr P )[ .. 100 ]\n  socket.on 'end',        ( P... ) -> whisper '^intershop-rpc@4432-5^', 'socket:end'                      # , ( rpr P )[ .. 100 ]\n  socket.on 'error',      ( P... ) -> whisper '^intershop-rpc@4432-6^', 'socket:error'                    # , ( rpr P )[ .. 100 ]\n  socket.on 'lookup',     ( P... ) -> whisper '^intershop-rpc@4432-7^', 'socket:lookup'                   # , ( rpr P )[ .. 100 ]\n  socket.on 'timeout',    ( P... ) -> whisper '^intershop-rpc@4432-8^', 'socket:timeout'                  # , ( rpr P )[ .. 100 ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_server_listen_on_all = ( socketserver ) ->\n  ### TAINT add arguments, timestamp ###\n  socketserver.on 'close',      ( P... ) -> whisper '^intershop-rpc@4432-9^', 'socketserver:close'        # , ( rpr P )[ .. 100 ]\n  socketserver.on 'connection', ( P... ) -> whisper '^intershop-rpc@4432-10^', 'socketserver:connection'  # , ( rpr P )[ .. 100 ]\n  socketserver.on 'error',      ( P... ) -> whisper '^intershop-rpc@4432-11^', 'socketserver:error'       # , ( rpr P )[ .. 100 ]\n  socketserver.on 'listening',  ( P... ) -> whisper '^intershop-rpc@4432-12^', 'socketserver:listening'   # , ( rpr P )[ .. 100 ]\n  return null\n\n\n"
  ]
}
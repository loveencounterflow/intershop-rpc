{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "",
  "sources": [
    "main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP/RPC/SECONDARY'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nNET                       = require 'net'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $drain }                = SP.export()\n#...........................................................................................................\nDATOM                     = require 'datom'\n{ new_datom\n  select }                = DATOM.export()\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = @types\n#...........................................................................................................\nO                         = require './options'\nprocess_is_managed        = module is require.main\n{ jr }                    = CND\n\n\n\n# debug '84874', '⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖⬖'\n# for key, value of process.env\n#   continue unless ( key.match /mojikura|intershop/ )?\n#   debug key, value\n\n#-----------------------------------------------------------------------------------------------------------\n@_acquire_host_rpc_routines = ->\n  ### TAINT test for name collisions ###\n  ### TAINT do not require `rpc_` prefix? ###\n  ### TAINT use dedicated namespace (object) to keep RPC methods ###\n  ### TAINT make compatible with xemitter conventions ###\n  intershop_host_modules_path = process.env[ 'intershop_host_modules_path' ]\n  help '^3334^', \"trying to acquire RPC routines from #{rpr intershop_host_modules_path}\"\n  if ( intershop_host_modules_path )?\n    host_rpc_module_path  = PATH.join intershop_host_modules_path, 'rpc.js'\n    host_rpc              = null\n    ### Make sure to accept missing `rpc.js` module without swallowing errors occurring during import: ###\n    try require.resolve host_rpc_module_path catch error\n      throw error unless error.code is 'MODULE_NOT_FOUND'\n      warn \"no such module: #{rpr host_rpc_module_path}\"\n      return null\n    host_rpc = require host_rpc_module_path\n    for key, value of host_rpc\n      info '^3389^', \"add host RPC attribute #{rpr key}\"\n      @[ key ] = value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@contract = ( key, method ) ->\n  ### TAINT use dedicated namespace (object) to keep RPC methods ###\n  ### TAINT make compatible with xemitter conventions ###\n  validate.nonempty_text key\n  validate.callable method\n  rpc_key = \"rpc_#{key}\"\n  if @[ rpc_key ]?\n    throw new Error \"^rpc-secondary/contract@55777^ method already exists: #{rpr key} (#{rpr rpc_key})\"\n  @[ rpc_key ] = method\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_socket_listen_on_all = ( socket ) ->\n  socket.on 'close',      -> whisper '^rpc-4432-1^', 'socket', 'close'\n  socket.on 'connect',    -> whisper '^rpc-4432-2^', 'socket', 'connect'\n  socket.on 'data',       -> whisper '^rpc-4432-3^', 'socket', 'data'\n  socket.on 'drain',      -> whisper '^rpc-4432-4^', 'socket', 'drain'\n  socket.on 'end',        -> whisper '^rpc-4432-5^', 'socket', 'end'\n  socket.on 'error',      -> whisper '^rpc-4432-6^', 'socket', 'error'\n  socket.on 'lookup',     -> whisper '^rpc-4432-7^', 'socket', 'lookup'\n  socket.on 'timeout',    -> whisper '^rpc-4432-8^', 'socket', 'timeout'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_server_listen_on_all = ( server ) ->\n  server.on 'close',      -> whisper '^rpc-4432-9^', 'server', 'close'\n  server.on 'connection', -> whisper '^rpc-4432-10^', 'server', 'connection'\n  server.on 'error',      -> whisper '^rpc-4432-11^', 'server', 'error'\n  server.on 'listening',  -> whisper '^rpc-4432-12^', 'server', 'listening'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@listen = ( handler = null ) ->\n  @_acquire_host_rpc_routines()\n  #.........................................................................................................\n  server = NET.createServer ( socket ) =>\n    #.......................................................................................................\n    # @_socket_listen_on_all socket\n    source    = SP.new_push_source()\n    socket.on 'data',   ( data  ) => source.send data unless data is ''\n    socket.on 'error',  ( error ) => warn \"socket error: #{error.message}\"\n    # socket.on 'error',  ( error ) => throw error\n    # socket.on 'end',              => source.end()\n    counts    = { requests: 0, rpcs: 0, hits: 0, fails: 0, errors: 0, }\n    S         = { socket, counts, }\n    pipeline  = []\n    #.......................................................................................................\n    pipeline.push source\n    pipeline.push SP.$split()\n    # pipeline.push $watch ( d ) => urge '^3398^', jr d\n    pipeline.push @$show_counts   S\n    pipeline.push @$dispatch      S\n    pipeline.push $drain()\n    #.......................................................................................................\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  handler ?= =>\n    { address: host, port, family, } = server.address()\n    app_name = O.app.name ? process.env[ 'intershop_db_name' ] ? 'intershop'\n    help \"RPC server for #{app_name} listening on #{family} #{host}:#{port}\"\n  #.........................................................................................................\n  # ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  # try FS.unlinkSync O.rpc.path catch error then warn error\n  # server.listen O.rpc.path, handler\n  # ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  # @_server_listen_on_all server\n  server.listen O.rpc.port, O.rpc.host, handler\n  @stop = -> server.close()\n  # debug '^899555^', ( k for k of server)\n  # process.on 'uncaughtException',   -> warn \"^8876^ uncaughtException\";   server.close -> whisper \"RPC server closed\"\n  # process.on 'unhandledRejection',  -> warn \"^8876^ unhandledRejection\";  server.close -> whisper \"RPC server closed\"\n  # process.on 'exit',                -> warn \"^8876^ exit\";                server.close -> whisper \"RPC server closed\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_counts = ( S ) ->\n  return $watch ( event ) ->\n    S.counts.requests += +1\n    if ( S.counts.requests % 1000 ) is 0\n      urge JSON.stringify S.counts\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$dispatch = ( S ) ->\n  return $ ( line, send ) =>\n    return null if line is ''\n    event       = null\n    method      = null\n    parameters  = null\n    $rsvp       = false\n    #.......................................................................................................\n    loop\n      try event = JSON.parse line catch error\n        @send_error S, \"\"\"^rpc-secondary/$dispatch@5564^\n          An error occurred while trying to parse #{rpr line}:\n          #{error.message}\"\"\"\n        break\n      #.....................................................................................................\n      switch type = type_of event\n        # when 'list'\n        #   warn \"^rpc-secondary/$dispatch@5564^ using list instead of object in RPC calls is deprecated\"\n        #   [ method, parameters, ] = event\n        #   $rsvp                   = true\n        when 'object'\n          { $key: method, $value: parameters, $rsvp, }  = event\n          $rsvp                                        ?= false\n        else\n          @send_error S, \"^rpc-secondary/$dispatch@5565^ expected object, got a #{type}: #{rpr event}\"\n          break\n      #.....................................................................................................\n      switch method\n        when 'error'\n          @send_error S, parameters\n        #...................................................................................................\n        ### Send `stop` signal to primary and exit secondary: ###\n        when 'stop'\n          process.send 'stop' if process_is_managed\n          process.exit()\n        #...................................................................................................\n        ### exit and have primary restart secondary: ###\n        when 'restart'\n          unless process_is_managed\n            warn \"received restart signal but standalone process can't restart\"\n          else\n            process.exit()\n        #...................................................................................................\n        else\n          if $rsvp is true\n            @do_rpc S, method, parameters\n      #.....................................................................................................\n      break\n    #.......................................................................................................\n    ### TAINT sending on failed lines w/out marking them as such? ###\n    send event ? line\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@do_rpc = ( S, method_name, parameters ) ->\n  S.counts.rpcs  += +1\n  method          = @[ \"rpc_#{method_name}\" ]\n  method_type     = type_of method\n  return @send_error S, \"no such method: #{rpr method_name}\" unless method?\n  #.........................................................................................................\n  try\n    switch method_type\n      when 'function'       then  result =        method.call @, S, parameters\n      when 'asyncfunction'  then  result = await  method.call @, S, parameters\n      else throw new Error \"unknown method type #{rpr method_type}\"\n  catch error\n    S.counts.errors += +1\n    try\n      { message, } = error\n    catch error_2\n      null\n    message ?= '(UNKNOWN ERROR MESSAGE)'\n    return @send_error S, error.message\n  if isa.promise result\n    result.then ( result ) => @_write S, method_name, result\n  else\n    @_write S, method_name, result\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@send_error = ( S, message ) ->\n  @_write S, 'error', message\n\n#-----------------------------------------------------------------------------------------------------------\n@_write = ( S, $method, parameters ) ->\n  # debug '^intershop-rpc-server-secondary.coffee@3332^', ( rpr method_name ), ( rpr parameters )\n  # if isa.object parameters  then  d = new_datom '^rpc-result', { $method, parameters..., }\n  # else                            d = new_datom '^rpc-result', { $method, $value: parameters, }\n  d = new_datom '^rpc-result', { $method, $value: parameters, }\n  S.socket.write ( JSON.stringify d ) + '\\n'\n  return null\n\n\n#===========================================================================================================\n# RPC METHODS\n#-----------------------------------------------------------------------------------------------------------\n@rpc_has_rpc_method = ( S, P ) ->\n  ### TAINT don't do ad-hoc name mangling, use dedicated namespace ###\n  validate.nonempty_text P\n  return @[ \"rpc_#{P}\" ]?\n\n#-----------------------------------------------------------------------------------------------------------\n@rpc_helo = ( S, P ) ->\n  return \"helo #{rpr P}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@rpc_add = ( S, P ) ->\n  unless ( CND.isa_list P ) and ( P.length is 2 )\n    throw new Error \"expected a list with two numbers, got #{rpr P}\"\n  [ a, b, ] = P\n  unless ( CND.isa_number a ) and ( CND.isa_number b )\n    throw new Error \"expected a list with two numbers, got #{rpr P}\"\n  return a + b\n\n#-----------------------------------------------------------------------------------------------------------\n@rpc_add_integers_only = ( S, P ) ->\n  unless ( CND.isa_list P ) and ( P.length is 2 )\n    throw new Error \"expected a list with two numbers, got #{rpr P}\"\n  [ a, b, ] = P\n  unless ( CND.isa_number a ) and ( CND.isa_number b )\n    throw new Error \"expected a list with two numbers, got #{rpr P}\"\n  unless ( a == Math.floor a )\n    throw new Error \"expected an integer, got #{rpr a}\"\n  unless ( b == Math.floor b )\n    throw new Error \"expected an integer, got #{rpr b}\"\n  return a + b\n\n\n############################################################################################################\nif module is require.main then do =>\n  RPCS = @\n  RPCS.listen()\n\n\n# curl --silent --show-error localhost:23001/\n# curl --silent --show-error localhost:23001\n# curl --show-error localhost:23001\n# grep -r --color=always -P '23001' db src bin tex-inputs | sort | less -SRN\n# grep -r --color=always -P '23001' . | sort | less -SRN\n# grep -r --color=always -P '23001|8910|rpc' . | sort | less -SRN\n\n\n"
  ]
}